package com.Revature.ecommerce.project2WesPSamvelA.service;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
// import org.springframework.boot.autoconfigure.security.SecurityProperties;
// import org.springframework.boot.autoconfigure.security.SecurityProperties.User;
import org.springframework.stereotype.Service;

import com.Revature.ecommerce.project2WesPSamvelA.dao.UserDao;
import com.Revature.ecommerce.project2WesPSamvelA.entity.UserEntity;
import com.Revature.ecommerce.project2WesPSamvelA.pojo.UserPojo;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserDao userDao;

	public UserServiceImpl() {

	}

	@Override
	public UserPojo addUser(UserPojo userPojo) {
		// logger.info("Entered getAllUsers() in service layer...");
		// return bookDao.addUser(userPojo);
		UserEntity newUserEntity = new UserEntity();
		BeanUtils.copyProperties(userPojo, newUserEntity); // copying the user pojo into a user entity

		userDao.saveAndFlush(newUserEntity); // save the entity object in the db

		// this will return the autogenretaed primary key
		userPojo.setUserId(newUserEntity.getUserId()); // we are copying the autogenerated userId present in the user
														// entity to the user pojo
		// logger.info("Exited getAllUsers() in service layer...");
		return userPojo;

	}

	@Override
	public UserPojo getEmployee(int userId) {
		// logger.info("Entered getEmployee() in service layer...");
		// return userDao.getEmployee(userId);
		Optional<UserEntity> optionalUserEntity = userDao.findById(userId);
		UserPojo fetchedUserPojo = null;
		if (optionalUserEntity.isPresent()) {
			fetchedUserPojo = new UserPojo();
			;
			BeanUtils.copyProperties(optionalUserEntity.get(), fetchedUserPojo);
		}
		// logger.info("Exited getEmployee() in service layer...");
		return fetchedUserPojo;
	}

	@Override
	public UserPojo getUser(int userId) {
		// logger.info("Entered getUser() in service layer...");
		// return userDao.getUser(userId);
		Optional<UserEntity> optionalUserEntity = userDao.findById(userId);
		UserPojo fetchedUserPojo = null;
		if (optionalUserEntity.isPresent()) {
			fetchedUserPojo = new UserPojo();
			;
			BeanUtils.copyProperties(optionalUserEntity.get(), fetchedUserPojo);
		}
		// logger.info("Exited getABook() in service layer...");
		return fetchedUserPojo;
	}

	@Override
	public UserEntity getUserByUsernameAndPassword(String username, String password) {
		UserEntity ue = userDao.getUserByUsernameAndPassword(username, password);
		System.out.println(ue);
		return ue;
	}

	/*
	 * Token is just base64 encoded string that consists of username, password and
	 * expiration timestamp which is set to be 5 minutes from now
	 * pretend that this is securely signed token =)
	 */
	public String signToken(String username, String password) {
		long tokenExpirationMs = Instant.now().toEpochMilli() + 5 * 60 * 1000;

		String decoded = username + ":" + password + ":" + tokenExpirationMs;

		return Base64.getEncoder().encodeToString(decoded.getBytes());
	}

	/*
	 * authenticates user by token.
	 * Returns either userpojo or throws an exception
	 */
	public UserPojo authenticate(String token) throws Exception {
		byte[] dataBytes = Base64.getDecoder().decode(token);
		String dataSt = new String(dataBytes);
		String[] data = dataSt.split(":");
		String userUserName = data[0];
		String userPassword = data[1];
		long expiration = Long.parseLong(data[2]);

		if (Instant.now().toEpochMilli() > expiration) {
			throw new Exception("token has expired");
		}

		UserEntity userEntity = userDao.getUserByUsernameAndPassword(userUserName, userPassword);

		UserPojo userPojo = new UserPojo();
		BeanUtils.copyProperties(userEntity, userPojo);

		return userPojo;
	}

}